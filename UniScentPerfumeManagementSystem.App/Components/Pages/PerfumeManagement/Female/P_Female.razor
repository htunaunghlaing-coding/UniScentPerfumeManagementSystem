@page "/female-perfumes"
@inject NavigationManager NavigationManager
@inject PerfumeService PerfumeService

<MudContainer MaxWidth="MaxWidth.Large">
    <!-- Header Section -->
    <MudGrid Class="mb-4">
        <!-- Title on the Left -->
        <MudItem xs="12" sm="6">
            <MudText Typo="Typo.h4">
                Female Perfumes
            </MudText>
        </MudItem>

        <!-- Search Bar on the Right -->
        <MudItem xs="12" sm="6" Class="d-flex justify-end align-center">
            <MudStack Row="true" Spacing="2" Style="width: 300px;">
                <MudTextField @bind-Value="searchQuery" Placeholder="Search..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="flex-grow-1" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FilterPerfumes">
                    <MudIcon Icon="@Icons.Material.Filled.Search" />
                </MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>

    <!-- Perfume Grid -->
    <MudGrid>
        @if (isAuthenticated && filteredPerfumes != null && filteredPerfumes.Any())
        {
            @foreach (var perfume in filteredPerfumes)
            {
                <MudItem xs="12" sm="6" md="3">
                    <MudCard Elevation="25" Class="mb-4">
                        <!-- Perfume Image with Click Event -->
                        <div style="position: relative; cursor: pointer;" @onclick="@(() => NavigateToDetail(perfume.Id))">
                            <MudCardMedia Image="@perfume.PictureUrl" Height="200" />
                            <MudBadge Color="@(perfume.StockQuantity > 0 ? Color.Success : Color.Error)"
                                      Variant="Variant.Filled"
                                      Style="position: absolute; bottom: -3px; left: 4px; padding: 4px 8px; font-size: 0.8rem;"
                                      Content="@(perfume.StockQuantity > 0 ? "In Stock" : "Out of Stock")" />
                        </div>

                        <!-- Perfume Details with Click Event -->
                        <MudCardContent @onclick="@(() => NavigateToDetail(perfume.Id))" Style="cursor: pointer;">
                            <MudText Typo="Typo.subtitle1">@perfume.Name</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@perfume.CompanyName</MudText>
                            <MudText Typo="Typo.body2">@perfume.SizeML ml</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Primary">$@perfume.Price</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        }
        else if (!isAuthenticated)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h5" Class="mt-4">Redirecting to login...</MudText>
            </MudItem>
        }
        else
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h5" Class="mt-4">No perfumes found.</MudText>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private List<PerfumeDataModel> perfumes = new();
    private List<PerfumeDataModel> filteredPerfumes = new();
    private string searchQuery = string.Empty;
    private bool isAuthenticated = false;

    [Inject]
    private AuthenticationStateProvider AuthStateProvider { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check authentication state
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

            if (!isAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Load female perfumes if authenticated
            await LoadPerfumes();
            StateHasChanged();
        }
    }

    private async Task LoadPerfumes()
    {
        var response = await PerfumeService.GetPerfumesByGender("Female");
        if (response.Response.IsSuccess)
        {
            perfumes = response.PerfumeList;
            filteredPerfumes = perfumes; // Initialize filtered list with all perfumes
        }
        else
        {
            Console.WriteLine("Failed to load perfumes.");
        }
    }

    private void FilterPerfumes()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredPerfumes = perfumes; // Show all perfumes if search query is empty
        }
        else
        {
            var query = searchQuery.Trim().ToLower();
            filteredPerfumes = perfumes.Where(p =>
                p.Name.ToLower().Contains(query) ||
                p.CompanyName.ToLower().Contains(query) ||
                p.Price.ToString().Contains(query) ||
                p.SizeML.ToString().Contains(query)
            ).ToList();
        }

        StateHasChanged(); // Trigger UI update
    }

    private void NavigateToDetail(int id)
    {
        Console.WriteLine($"Navigating to /perfume-detail/{id}");
        NavigationManager.NavigateTo($"/perfume-detail/{id}");
    }
}