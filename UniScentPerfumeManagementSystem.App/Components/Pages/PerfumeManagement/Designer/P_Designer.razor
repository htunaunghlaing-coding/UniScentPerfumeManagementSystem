@page "/designer"
@inject NavigationManager NavigationManager
@inject PerfumeService PerfumeService
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<P_Designer> _logger

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid Class="mb-4">
        <MudItem xs="12" sm="6">
            <MudText Typo="Typo.h4">Designer Perfumes</MudText>
        </MudItem>

        <MudItem xs="12" sm="6" Class="d-flex justify-end align-center">
            <MudStack Row="true" Spacing="2" Style="width: 300px;">
                <MudTextField @bind-Value="searchQuery" Placeholder="Search..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="flex-grow-1" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FilterPerfumes">
                    <MudIcon Icon="@Icons.Material.Filled.Search" />
                </MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>

    <MudGrid>
        @if (filteredPerfumes != null && filteredPerfumes.Any())
        {
            @foreach (var perfume in filteredPerfumes)
            {
                <MudItem xs="12" sm="6" md="3">
                    <MudCard Elevation="25" Class="mb-4">
                        <div style="position: relative; cursor: pointer;" @onclick="@(() => NavigateToDetail(perfume.Id))">
                            <MudCardMedia Image="@perfume.PictureUrl" Height="200" />
                            <MudBadge Color="@(perfume.StockQuantity > 0 ? Color.Success : Color.Error)"
                                      Variant="Variant.Filled"
                                      Style="position: absolute; bottom: -3px; left: 4px; padding: 4px 8px; font-size: 0.8rem;"
                                      Content="@(perfume.StockQuantity > 0 ? "In Stock" : "Out of Stock")" />
                        </div>

                        <MudCardContent @onclick="@(() => NavigateToDetail(perfume.Id))" Style="cursor: pointer;">
                            <MudText Typo="Typo.subtitle1">@perfume.Name</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@perfume.CompanyName</MudText>
                            <MudText Typo="Typo.body2">@perfume.SizeML ml</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Primary">$@perfume.Price</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h5" Class="mt-4">No perfumes found.</MudText>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private List<PerfumeDataModel> perfumes = new();
    private List<PerfumeDataModel> filteredPerfumes = new();
    private string searchQuery = string.Empty;
    private UserSessionModel _userSession = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _logger.LogInformation("Loading designer perfumes page.");

                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;

                var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity == null || !authState.User.Identity.IsAuthenticated)
                {
                    _logger.LogWarning("User not authenticated. Redirecting to login.");
                    NavigationManager.NavigateTo("/login");
                    return;
                }

                _userSession = await customAuthStateProvider.GetUserData();

                await LoadPerfumes();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An unexpected error occurred while initializing the designer perfumes page.");
            }
            finally
            {
                StateHasChanged();
            }
        }
    }

    private async Task LoadPerfumes()
    {
        try
        {
            _logger.LogInformation("Fetching perfumes by category: Designer");

            var result = await PerfumeService.GetPerfumesByCategory("Designer");

            if (result.IsSuccess)
            {
                perfumes = result.Data.PerfumeList;
                filteredPerfumes = perfumes;

                _logger.LogInformation("Successfully loaded {PerfumeCount} designer perfumes.", perfumes.Count);
            }
            else
            {
                _logger.LogWarning("Failed to load perfumes. Error: {ErrorMessage}", result.Message);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred while loading perfumes.");
        }
    }

    private void FilterPerfumes()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(searchQuery))
            {
                _logger.LogInformation("Resetting filtered perfumes to all available perfumes.");
                filteredPerfumes = perfumes;
            }
            else
            {
                var query = searchQuery.Trim().ToLower();
                filteredPerfumes = perfumes.Where(p =>
                    p.Name.ToLower().Contains(query) ||
                    p.CompanyName.ToLower().Contains(query) ||
                    p.Price.ToString().Contains(query) ||
                    p.SizeML.ToString().Contains(query)
                ).ToList();

                _logger.LogInformation("Filtered perfumes based on search query: {SearchQuery}. Found {FilteredCount} matches.", searchQuery, filteredPerfumes.Count);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred while filtering perfumes.");
        }
    }

    private void NavigateToDetail(int id)
    {
        try
        {
            _logger.LogInformation("Navigating to perfume detail page for perfume ID: {PerfumeId}", id);
            NavigationManager.NavigateTo($"/perfume-detail/{id}");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred while navigating to perfume detail page.");
        }
    }
}