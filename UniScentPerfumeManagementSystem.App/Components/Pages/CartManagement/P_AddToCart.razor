@page "/addToCart"
@using UniScentPerfumeManagementSystem.Services
@inject NavigationManager NavigationManager
@inject CartService CartService
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<P_AddToCart> _logger

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Class="pa-4">
        @if (isAuthenticated)
        {
            @if (cartResponse.CartItems != null && cartResponse.CartItems.Any())
            {
                <MudText Typo="Typo.h4" Class="mb-4">Your Cart (@cartResponse.CartItems.Count items)</MudText>

                @foreach (var item in cartResponse.CartItems)
                {
                    <div class="cart-item mb-6">
                        <div class="d-flex align-center justify-space-between">
                            <MudImage Src="@item.Perfume.PictureUrl" Class="perfume-image mr-4" />

                            <div style="flex-grow: 1;">
                                <MudText Typo="Typo.h5" Class="bold-perfume-name">@item.Perfume.Name</MudText>
                                <MudText Typo="Typo.body2">@item.Perfume.SizeML ml</MudText>
                                <div class="d-flex align-center mt-8">
                                    <div class="quantity-container">
                                        <button class="quantity-button decrease" @onclick="() => DecreaseQuantity(item.Perfume.Id)" disabled="@(item.Quantity <= 1)">
                                            -
                                        </button>
                                        <span class="quantity-value">@item.Quantity</span>
                                        <button class="quantity-button increase" @onclick="() => IncreaseQuantity(item.Perfume.Id)">
                                            +
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <div class="d-flex flex-column align-end">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => RemoveFromCart(item.Perfume.Id)" Class="mb-9" />
                                <MudText Typo="Typo.subtitle2">$@(item.Perfume.Price * item.Quantity)</MudText>
                            </div>
                        </div>
                    </div>
                }

                <MudText Typo="Typo.h5" Class="mt-4">Total: $@cartResponse.TotalPrice</MudText>

                <MudButton Variant="Variant.Filled" Color="Color.Success" Class="mt-4" OnClick="NavigateToCheckout">
                    <MudIcon Icon="@Icons.Material.TwoTone.ShoppingCartCheckout" Size="Size.Medium" Class="mr-3" />
                    Checkout
                </MudButton>
            }
            else
            {
                <MudText Typo="Typo.h5">Your cart is empty.</MudText>
            }
        }
        else
        {
            <MudText Typo="Typo.h5">Redirecting to login...</MudText>
        }
    </MudPaper>
</MudContainer>

<style>
    .cart-item {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 1rem;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .mr-4 {
        margin-right: 1.5rem;
    }

    .mt-4 {
        margin-top: 1rem;
    }

    .perfume-image {
        width: 180px;
        height: 180px;
        object-fit: cover;
        border-radius: 0;
    }

    .quantity-container {
        display: flex;
        align-items: center;
        border: 2px solid #aaa;
        border-radius: 4px;
        padding: 2px;
    }

    .quantity-button {
        width: 32px;
        height: 32px;
        border: none;
        background-color: transparent;
        cursor: pointer;
        font-size: 1rem;
        font-weight: bold;
        transition: background-color 0.3s ease;
    }

        .quantity-button:hover {
            background-color: #f0f0f0;
        }

        .quantity-button:disabled {
            cursor: not-allowed;
            opacity: 0.5;
        }

    .quantity-value {
        min-width: 32px;
        text-align: center;
        font-size: 1rem;
        font-weight: bold;
    }

    .bold-perfume-name {
        font-weight: 700 !important;
        color: #333;
    }
</style>

@code {
    private bool isAuthenticated = false;
    private UserSessionModel _userSession = new();
    private CartResponseModel cartResponse = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;

                var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
                isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

                if (!isAuthenticated)
                {
                    NavigationManager.NavigateTo("/login");
                    return;
                }

                _userSession = await customAuthStateProvider.GetUserData();

                // Load cart items
                cartResponse = CartService.GetCartItems();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.ToString());
            }
        }
    }

    private void IncreaseQuantity(int perfumeId)
    {
        try
        {
            cartResponse = CartService.UpdateQuantity(perfumeId, 1);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, ex.ToString());
        }
    }

    private void DecreaseQuantity(int perfumeId)
    {
        try
        {
            cartResponse = CartService.UpdateQuantity(perfumeId, -1);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, ex.ToString());
        }
    }

    private void RemoveFromCart(int perfumeId)
    {
        try
        {
            cartResponse = CartService.RemoveFromCart(perfumeId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, ex.ToString());
        }
    }

    private void NavigateToCheckout()
    {
        NavigationManager.NavigateTo("/checkout");
    }
}