@page "/checkout"
@inject CartService _cartService
@inject CheckoutService _checkoutService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<P_Checkout> _logger
@inject IJSRuntime JSRuntime
@using UniScentPerfumeManagementSystem.Domain.Features.OrderManagement
@using UniScentPerfumeManagementSystem.Domain.Features.OrderManagement.Enums

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Class="pa-4">
        @if (!string.IsNullOrEmpty(responseMessage))
        {
            <MudAlert Severity="@(isSuccess ? Severity.Success : Severity.Error)">
                @responseMessage
            </MudAlert>
        }

        <MudGrid>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h5" Class="mb-4">Payment Details</MudText>

                <MudSelect T="PaymentMethod" @bind-Value="selectedPaymentMethod" Label="Payment Method" Variant="Variant.Outlined" Class="mb-4"
                           Required="true" RequiredError="Payment method is required." Placeholder="Select payment type">
                    @foreach (var method in Enum.GetValues(typeof(PaymentMethod)).Cast<PaymentMethod>())
                    {
                        <MudSelectItem T="PaymentMethod" Value="@method">@method</MudSelectItem>
                    }
                </MudSelect>

                <MudTextField @bind-Value="cardNumber" Label="Card Number" Variant="Variant.Outlined" Class="mb-4"
                              Required="true" RequiredError="Card number is required." />
                <MudTextField @bind-Value="expirationDate" Label="Expiration Date" Variant="Variant.Outlined" Class="mb-4"
                              Required="true" RequiredError="Expiration date is required." />
                <MudTextField @bind-Value="securityCode" Label="Security Code" Variant="Variant.Outlined" Class="mb-4"
                              Required="true" RequiredError="Security code is required." />
                <MudTextField @bind-Value="nameOnCard" Label="Name on Card" Variant="Variant.Outlined" Class="mb-4"
                              Required="true" RequiredError="Name on card is required." />

                <MudText Typo="Typo.h6" Class="mb-2">Billing Address</MudText>
                <MudTextField @bind-Value="billingAddress.Country" Label="Country" Variant="Variant.Outlined" Class="mb-4"
                              Required="true" RequiredError="Country is required." />
                <MudTextField @bind-Value="billingAddress.FullName" Label="Full Name" Variant="Variant.Outlined" Class="mb-4"
                              Required="true" RequiredError="Full name is required." />
                <MudTextField @bind-Value="billingAddress.AddressLine1" Label="Address Line 1" Variant="Variant.Outlined" Class="mb-4"
                              Required="true" RequiredError="Address line 1 is required." />
                <MudTextField @bind-Value="billingAddress.AddressLine2" Label="Address Line 2" Variant="Variant.Outlined" Class="mb-4" />
                <MudTextField @bind-Value="billingAddress.City" Label="City" Variant="Variant.Outlined" Class="mb-4"
                              Required="true" RequiredError="City is required." />
                <MudTextField @bind-Value="billingAddress.State" Label="State" Variant="Variant.Outlined" Class="mb-4"
                              Required="true" RequiredError="State is required." />
                <MudTextField @bind-Value="billingAddress.PostalCode" Label="Postal Code" Variant="Variant.Outlined" Class="mb-4"
                              Required="true" RequiredError="Postal code is required." />
                <MudTextField @bind-Value="billingAddress.PhoneNo" Label="Phone Number" Variant="Variant.Outlined" Class="mb-4"
                              Required="true" RequiredError="Phone number is required." />

                <MudText Typo="Typo.h6" Class="mb-2">Add a Tip</MudText>
                <div class="tips-container">
                    <button class="tip-button" @onclick="() => SetTips(0)">0%</button>
                    <button class="tip-button" @onclick="() => SetTips(10)">10%</button>
                    <button class="tip-button" @onclick="() => SetTips(15)">15%</button>
                    <button class="tip-button" @onclick="() => SetTips(20)">20%</button>
                </div>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h5" Class="mb-4">Order Summary</MudText>

                @if (cartItems != null && cartItems.Any())
                {
                    @foreach (var item in cartItems)
                    {
                        <div class="cart-item mb-6">
                            <div class="d-flex align-center justify-space-between">
                                <div class="perfume-container position-relative">
                                    <MudImage Src="@item.Perfume.PictureUrl" Class="perfume-image mr-4" />
                                    <span class="quantity-circle-top">@item.Quantity</span>
                                </div>
                                <div style="flex-grow: 1;">
                                    <MudText Typo="Typo.h5" Class="perfume-name">@item.Perfume.Name</MudText>
                                    <MudText Typo="Typo.body2">@item.Perfume.SizeML ml</MudText>
                                </div>
                                <div class="d-flex flex-column align-end">
                                    <MudText Typo="Typo.subtitle2">$@(item.Perfume.Price * item.Quantity)</MudText>
                                </div>
                            </div>
                        </div>
                    }

                    <MudDivider Class="my-4" />

                    <div class="price-summary">
                        <MudText Typo="Typo.subtitle1" Class="price-row">
                            Subtotal: <span class="price-value">$@CalculateSubtotal()</span>
                        </MudText>
                        <MudText Typo="Typo.subtitle1" Class="price-row">
                            Tips (@tipsPercentage%): <span class="price-value">$@CalculateTips()</span>
                        </MudText>
                        <MudText Typo="Typo.h6" Class="price-row">
                            Total: <span class="price-value">$@CalculateTotalWithTips()</span>
                        </MudText>
                    </div>

                    <MudButton Variant="Variant.Filled" Color="Color.Success" Class="mt-4" OnClick="ShowConfirmationDialog" Disabled="@isLoading">
                        @(isLoading ? "Processing..." : "Place Order")
                    </MudButton>
                }
                else
                {
                    <MudText Typo="Typo.h5" Class="text-center">Your cart is empty.</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="NavigateToShop">
                        Return to Shop
                    </MudButton>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

<style>
    .cart-item {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 1rem;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-top: 1.5rem;
    }

    .perfume-image {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 8px;
        position: relative;
    }

    .quantity-circle-top {
        position: absolute;
        top: 1.5px; 
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #333; 
        color: white;
        border-radius: 50%;
        font-size: 0.8rem; 
        font-weight: bold;
    }

    .perfume-name {
        font-size: 1rem; 
        font-weight: bold;
    }

    .price-summary {
        margin-top: 1rem;
    }

    .price-row {
        display: flex;
        justify-content: space-between;
    }

    .price-value {
        font-weight: bold;
        color: #333;
    }

    .tips-container {
        display: flex;
        gap: 8px; 
        align-items: center;
    }

    
    .tip-button {
        background-color: black; 
        color: white;
        border: none; 
        border-radius: 20px; 
        padding: 8px 16px; 
        font-size: 0.9rem; 
        font-weight: bold;
        cursor: pointer; 
        transition: all 0.2s ease; 
    }

        .tip-button:hover {
            background-color: #444; 
            transform: scale(1.05); 
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); 
        }

        .tip-button:active {
            background-color: #333; 
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); 
            transform: scale(0.95);
        }
</style>

@code {
    private UserSessionModel _userSession = new();
    private PaymentMethod selectedPaymentMethod;
    private string cardNumber = string.Empty;
    private string expirationDate = string.Empty;
    private string securityCode = string.Empty;
    private string nameOnCard = string.Empty;
    private BillingAddressModel billingAddress = new();
    private decimal tipsPercentage = 0;
    private List<CartItemModel> cartItems = new();
    private bool isLoading = false;
    private string responseMessage = string.Empty;
    private bool isSuccess = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _logger.LogInformation("Initializing checkout page.");

                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                var authState = await customAuthStateProvider.GetAuthenticationStateAsync();

                if (authState.User.Identity == null || !authState.User.Identity.IsAuthenticated)
                {
                    _logger.LogWarning("User not authenticated. Redirecting to login.");
                    Navigation.NavigateTo("/login");
                    return;
                }

                _userSession = await customAuthStateProvider.GetUserData();
                await LoadCartItems();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An unexpected error occurred while initializing the checkout page.");
            }
        }
    }

    private void NavigateToShop()
    {
        try
        {
            _logger.LogInformation("Navigating to shop page.");
            Navigation.NavigateTo("/shop");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred while navigating to the shop page.");
        }
    }

    private void SetTips(decimal percentage)
    {
        try
        {
            _logger.LogInformation("Setting tips percentage to {TipsPercentage}%", percentage);
            tipsPercentage = percentage;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred while setting tips percentage.");
        }
    }

    private decimal CalculateSubtotal()
    {
        try
        {
            var subtotal = cartItems.Sum(item => item.Perfume.Price * item.Quantity);
            _logger.LogInformation("Calculated subtotal: ${Subtotal}", subtotal);
            return subtotal;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred while calculating the subtotal.");
            throw;
        }
    }

    private decimal CalculateTips()
    {
        try
        {
            var tips = CalculateSubtotal() * (tipsPercentage / 100);
            _logger.LogInformation("Calculated tips: ${Tips}", tips);
            return tips;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred while calculating the tips.");
            throw;
        }
    }

    private decimal CalculateTotalWithTips()
    {
        try
        {
            var total = CalculateSubtotal() + CalculateTips();
            _logger.LogInformation("Calculated total with tips: ${Total}", total);
            return total;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred while calculating the total with tips.");
            throw;
        }
    }

    private async Task ShowConfirmationDialog()
    {
        try
        {
            var confirmationMessage = @"
Are you sure you want to checkout these perfumes?
";

            _logger.LogInformation("Showing confirmation dialog for order placement.");
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", confirmationMessage);

            if (confirmed)
            {
                await PlaceOrder();
            }
            else
            {
                _logger.LogInformation("User canceled the order confirmation.");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred while showing the confirmation dialog.");
        }
    }

    private async Task PlaceOrder()
    {
        isLoading = true;
        try
        {
            _logger.LogInformation("Attempting to place order for user ID: {UserId}", _userSession.UserId);

            if (string.IsNullOrEmpty(selectedPaymentMethod.ToString()) ||
                string.IsNullOrEmpty(cardNumber) ||
                string.IsNullOrEmpty(expirationDate) ||
                string.IsNullOrEmpty(securityCode) ||
                string.IsNullOrEmpty(nameOnCard) ||
                string.IsNullOrEmpty(billingAddress.Country) ||
                string.IsNullOrEmpty(billingAddress.FullName) ||
                string.IsNullOrEmpty(billingAddress.AddressLine1) ||
                string.IsNullOrEmpty(billingAddress.City) ||
                string.IsNullOrEmpty(billingAddress.State) ||
                string.IsNullOrEmpty(billingAddress.PostalCode) ||
                string.IsNullOrEmpty(billingAddress.PhoneNo))
            {
                responseMessage = "Please fill out all required fields.";
                isSuccess = false;

                _logger.LogWarning("Order placement failed due to missing required fields.");
                StateHasChanged();
                return;
            }

            var request = new OrderRequestModel
                {
                    UserId = _userSession.UserId,
                    Items = cartItems.Select(item => new OrderItemRequestModel
                    {
                        PerfumeId = item.Perfume.Id,
                        Quantity = item.Quantity,
                        UnitPrice = item.Perfume.Price
                    }).ToList(),
                    TotalAmount = CalculateTotalWithTips(),
                    PaymentMethod = selectedPaymentMethod,
                    BillingAddress = billingAddress,
                    TipsPercentage = tipsPercentage
                };

            _logger.LogInformation("Processing order for user ID: {UserId}. Total amount: ${TotalAmount}", _userSession.UserId, request.TotalAmount);

            var result = await _checkoutService.ProcessOrderAsync(request);

            if (result.IsSuccess)
            {
                responseMessage = "Thanks for shopping our perfumes. Enjoy your scent, Man!";
                isSuccess = true;

                cartItems.Clear();

                _logger.LogInformation("Order placed successfully for user ID: {UserId}", _userSession.UserId);
            }
            else
            {
                responseMessage = result.Message ?? "An unknown error occurred.";
                isSuccess = false;

                _logger.LogWarning("Order placement failed for user ID: {UserId}. Error: {ErrorMessage}", _userSession.UserId, result.Message);
            }
        }
        catch (Exception ex)
        {
            responseMessage = $"Error placing order: {ex.Message}";
            isSuccess = false;

            _logger.LogError(ex, "An unexpected error occurred while placing the order for user ID: {UserId}", _userSession.UserId);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCartItems()
    {
        try
        {
            _logger.LogInformation("Loading cart items for user ID: {UserId}", _userSession.UserId);

            var result = await _cartService.GetCartItems();
            if (result.IsSuccess)
            {
                cartItems = result.Data.CartItems;

                _logger.LogInformation("Successfully loaded {CartItemCount} cart items for user ID: {UserId}", cartItems.Count, _userSession.UserId);
            }
            else
            {
                responseMessage = result.Message ?? "Failed to load cart items.";
                isSuccess = false;

                _logger.LogWarning("Failed to load cart items for user ID: {UserId}. Error: {ErrorMessage}", _userSession.UserId, result.Message);
            }
        }
        catch (Exception ex)
        {
            responseMessage = $"Error loading cart items: {ex.Message}";
            isSuccess = false;

            _logger.LogError(ex, "An unexpected error occurred while loading cart items for user ID: {UserId}", _userSession.UserId);
        }
        finally
        {
            StateHasChanged();
        }
    }
}