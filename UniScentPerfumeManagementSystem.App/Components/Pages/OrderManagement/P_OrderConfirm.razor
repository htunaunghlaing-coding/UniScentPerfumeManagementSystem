@page "/orderConfirmation"
@inject NavigationManager Navigation
@inject OrderConfirmService _orderConfirmService
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<OrderConfirmationPage> _logger
@using UniScentPerfumeManagementSystem.Domain.Features.OrderManagement
@using UniScentPerfumeManagementSystem.Domain.Features.OrderManagement.Enums
@using UniScentPerfumeManagementSystem.Domain.Features.OrderManagement.Services

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Class="pa-4">
        <!-- Display Success/Error Messages -->
        @if (!string.IsNullOrEmpty(responseMessage))
        {
            <MudAlert Severity="@(isSuccess ? Severity.Success : Severity.Error)">
                @responseMessage
            </MudAlert>
        }

        <MudGrid>
            <!-- Left Side: Order Details -->
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h5" Class="mb-4">Order Summary</MudText>

                @if (orderDetails != null && orderDetails.Items.Any())
                {
                    @foreach (var item in orderDetails.Items)
                    {
                        <div class="cart-item mb-6">
                            <div class="d-flex align-center justify-space-between">
                                <div class="perfume-container position-relative">
                                    <MudImage Src="@item.PictureUrl" Class="perfume-image mr-4" Width="80px" Height="80px" />
                                    <span class="quantity-circle-top">@item.Quantity</span>
                                </div>
                                <div style="flex-grow: 1;">
                                    <MudText Typo="Typo.h5" Class="perfume-name">@item.Name</MudText>
                                    <MudText Typo="Typo.body2">@item.SizeMl ml</MudText>
                                </div>
                                <div class="d-flex flex-column align-end">
                                    <MudText Typo="Typo.subtitle2">$@item.UnitPrice</MudText>
                                </div>
                            </div>
                        </div>
                    }

                    <MudDivider Class="my-4" />

                    <div class="price-summary">
                        <MudText Typo="Typo.subtitle1" Class="price-row">
                            Subtotal: <span class="price-value">$@orderDetails.Subtotal</span>
                        </MudText>
                        <MudText Typo="Typo.subtitle1" Class="price-row">
                            Tips (@orderDetails.TipsPercentage%): <span class="price-value">$@orderDetails.TipsAmount</span>
                        </MudText>
                        <MudText Typo="Typo.h6" Class="price-row">
                            Total: <span class="price-value">$@orderDetails.TotalAmount</span>
                        </MudText>
                    </div>
                }
                else
                {
                    <MudText Typo="Typo.h5" Class="text-center">No order details available.</MudText>
                }
            </MudItem>

            <!-- Right Side: Payment and Billing Details -->
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h5" Class="mb-4">Billing Details</MudText>

                @if (orderDetails?.BillingAddress != null)
                {
                    <MudTextField Value="@orderDetails.BillingAddress.FullName" Label="Full Name" Variant="Variant.Outlined" ReadOnly="true" Class="mb-4" />
                    <MudTextField Value="@orderDetails.BillingAddress.AddressLine1" Label="Address Line 1" Variant="Variant.Outlined" ReadOnly="true" Class="mb-4" />
                    <MudTextField Value="@orderDetails.BillingAddress.City" Label="City" Variant="Variant.Outlined" ReadOnly="true" Class="mb-4" />
                    <MudTextField Value="@orderDetails.BillingAddress.State" Label="State" Variant="Variant.Outlined" ReadOnly="true" Class="mb-4" />
                    <MudTextField Value="@orderDetails.BillingAddress.PostalCode" Label="Postal Code" Variant="Variant.Outlined" ReadOnly="true" Class="mb-4" />
                    <MudTextField Value="@orderDetails.BillingAddress.PhoneNo" Label="Phone Number" Variant="Variant.Outlined" ReadOnly="true" Class="mb-4" />
                }

                <MudText Typo="Typo.h6" Class="mt-4">Payment Method</MudText>
                <MudText Typo="Typo.body1" Class="mb-4">@orderDetails?.PaymentMethod</MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private UserSessionModel _userSession = new();
    private OrderConfirmRequestModel _reqModel = new();
    private OrderDetailsModel orderDetails = new();
    private string responseMessage = string.Empty;
    private bool isSuccess = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;

            var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity == null || !authState.User.Identity.IsAuthenticated)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            _userSession = await customAuthStateProvider.GetUserData(); // Populate UserSessionModel

            // Set the OrderId (e.g., from query parameters or session)
            _reqModel.OrderId = 1; // Replace with actual OrderId (e.g., from query parameters)

            await LoadOrderDetails(); // Call the method to load order details
        }
    }

    private async Task LoadOrderDetails()
    {
        try
        {
            _reqModel.CurrentUserId = _userSession.UserId; // Dynamically retrieve UserId from session
            orderDetails = await _orderConfirmService.GetOrderDetailsAsync(_reqModel);

            if (orderDetails == null || !orderDetails.Items.Any())
            {
                responseMessage = "No order details found.";
                isSuccess = false;
                return;
            }
        }
        catch (Exception ex)
        {
            responseMessage = $"Error loading order details: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            StateHasChanged(); // Ensure the UI is updated after loading order details
        }
    }
}