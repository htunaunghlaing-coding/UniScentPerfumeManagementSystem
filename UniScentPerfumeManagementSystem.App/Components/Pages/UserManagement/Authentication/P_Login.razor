@page "/login"
@using UniScentPerfumeManagementSystem.App.Components.Layout
@layout EmptyLayout
@inject LoginService _loginService
@inject RegisterService _registerService
@inject NavigationManager Navigation
@rendermode RenderMode.InteractiveServer
@inject ILogger<P_Login> _logger

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-sm p-4" style="width: 100%; max-width: 400px;">
        <div class="card-body">
            @if (!_isRegister)
            {
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger text-center mb-3">
                        @errorMessage
                    </div>
                }

                <h1 class="h3 mb-3 fw-normal text-center">Sign In</h1>
                <EditForm Model="_loginModel" OnValidSubmit="SignIn">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label class="form-label">UserName</label>
                        <InputText @bind-Value="_loginModel.UserName" class="form-control" placeholder="UserName" />
                        <ValidationMessage For="() => _loginModel.UserName" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <div class="input-group">
                            <InputText type=@password @bind-Value="_loginModel.Password" class="form-control" placeholder="Password" />
                            <button type="button" class="btn btn-outline-secondary" @onclick="PasswordVisibility">
                                <i class="@passwordIcon"></i>
                            </button>
                        </div>
                        <ValidationMessage For="() => _loginModel.Password" class="text-danger" />
                    </div>

                    <button type="submit" class="btn btn-dark w-100 py-2">Sign In</button>
                </EditForm>

                <div class="text-center mt-3">
                    <a href="javascript:void(0);" @onclick="() => ChangePage()">Don't have an account? <strong>Sign Up</strong></a>
                </div>
            }
            else
            {
                <h1 class="h3 mb-3 fw-normal text-center">Register</h1>
                <EditForm Model="_registerModel" OnValidSubmit="Register">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label class="form-label">UserName</label>
                        <InputText @bind-Value="_registerModel.UserName" class="form-control" placeholder="UserName" />
                        <ValidationMessage For="() => _registerModel.UserName" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <InputText @bind-Value="_registerModel.Email" class="form-control" placeholder="Email" />
                        <ValidationMessage For="() => _registerModel.Email" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Phone No</label>
                        <InputText @bind-Value="_registerModel.PhoneNo" class="form-control" placeholder="Phone Number" />
                        <ValidationMessage For="() => _registerModel.PhoneNo" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <div class="input-group">
                            <InputText type=@password @bind-Value="_registerModel.Password" class="form-control" placeholder="Password" />
                            <button type="button" class="btn btn-outline-secondary" @onclick="PasswordVisibility">
                                <i class="@passwordIcon"></i>
                            </button>
                        </div>
                        <ValidationMessage For="() => _registerModel.Password" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Confirm Password</label>
                        <div class="input-group">
                            <InputText type=@cPassword @bind-Value="_registerModel.ConfirmPassword" class="form-control" placeholder="Confirm Password" />
                            <button type="button" class="btn btn-outline-secondary" @onclick="ConfirmPasswordVisibility">
                                <i class="@cPasswordIcon"></i>
                            </button>
                        </div>
                        <ValidationMessage For="() => _registerModel.ConfirmPassword" class="text-danger" />
                    </div>

                    <button type="submit" class="btn btn-dark w-100 py-2">Sign Up</button>
                </EditForm>

                <div class="text-center mt-3">
                    <a href="javascript:void(0);" @onclick="() => ChangePage()">Already have an account? <strong>Sign In</strong></a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private LoginRequestModel _loginModel = new();
    private RegisterRequestModel _registerModel = new();
    private bool _isRegister = false;
    private bool isPasswordVisible = false;
    private bool isCPasswordVisible = false;
    private string password = "password";
    private string cPassword = "password";
    private string passwordIcon => isPasswordVisible ? "bi bi-eye-fill" : "bi bi-eye-slash-fill";
    private string cPasswordIcon => isCPasswordVisible ? "bi bi-eye-fill" : "bi bi-eye-slash-fill";
    private string errorMessage = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _logger.LogInformation("Login page rendered.");
            StateHasChanged();
        }
    }

    async Task SignIn()
    {
        try
        {
            _logger.LogInformation("Attempting to sign in user: {UserName}", _loginModel.UserName);

            var result = await _loginService.Login(_loginModel);
            if (!result.IsSuccess)
            {
                _logger.LogWarning("Login failed for user: {UserName}. Error: {ErrorMessage}", _loginModel.UserName, result.Message);
                errorMessage = result.Message;
                StateHasChanged();
                return;
            }

            errorMessage = string.Empty;

            var userSessionModel = new UserSessionModel
                {
                    UserName = result.Data.UserName,
                    Role = result.Data.Role,
                    UserId = result.Data.UserId,
                };

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSessionModel);

            _logger.LogInformation("User {UserName} logged in successfully.", userSessionModel.UserName);
            Navigation.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred during login.");
            errorMessage = "An unexpected error occurred. Please try again later.";
            StateHasChanged();
        }
    }

    async Task Register()
    {
        try
        {
            _logger.LogInformation("Attempting to register user: {UserName}", _registerModel.UserName);

            var result = await _registerService.Register(_registerModel);
            if (!result.IsSuccess)
            {
                _logger.LogWarning("Registration failed for user: {UserName}. Error: {ErrorMessage}", _registerModel.UserName, result.Message);
                errorMessage = result.Message;
                StateHasChanged();
                return;
            }

            _isRegister = false;
            _loginModel = new();
            _registerModel = new();

            errorMessage = string.Empty;

            _logger.LogInformation("User {UserName} registered successfully.", _registerModel.UserName);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred during registration.");
            errorMessage = "An unexpected error occurred. Please try again later.";
            StateHasChanged();
        }
    }

    private void ChangePage()
    {
        try
        {
            _logger.LogInformation("Switching between login and register pages. Current state: {IsRegister}", _isRegister);

            _isRegister = !_isRegister;
            _loginModel = new();
            _registerModel = new();

            errorMessage = string.Empty;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred while switching pages.");
        }
    }

    private void PasswordVisibility()
    {
        try
        {
            isPasswordVisible = !isPasswordVisible;
            password = password == "password" ? "text" : "password";

            _logger.LogInformation("Password visibility toggled. Visible: {IsPasswordVisible}", isPasswordVisible);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred while toggling password visibility.");
        }
    }

    private void ConfirmPasswordVisibility()
    {
        try
        {
            isCPasswordVisible = !isCPasswordVisible;
            cPassword = cPassword == "password" ? "text" : "password";

            _logger.LogInformation("Confirm password visibility toggled. Visible: {IsCPasswordVisible}", isCPasswordVisible);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred while toggling confirm password visibility.");
        }
    }
}