@page "/login"
@using UniScentPerfumeManagementSystem.App.Components.Layout
@layout EmptyLayout
@inject LoginService _loginService
@inject RegisterService _registerService
@inject NavigationManager Navigation
@rendermode RenderMode.InteractiveServer

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-sm p-4" style="width: 100%; max-width: 400px;">
        <div class="card-body">
            @if (!_isRegister)
            {
                <h1 class="h3 mb-3 fw-normal text-center">Sign In</h1>
                <form class="form-horizontal" id="signin-form" method="post" action="/SignIn/Index">
                    <div class="form-floating mb-3">
                        <div class="mb-3">
                            <label class="form-label">UserName</label>
                            <input class="form-control" type="text" placeholder="UserName" @bind-value="_reqModel.UserName" maxlength="50" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <div class="input-group">
                                <input class="form-control" type=@password placeholder="Password" @bind-value="_reqModel.Password" maxlength="50" />
                                <button type="button" class="btn btn-outline-secondary" @onclick="PasswordVisibility">
                                    <i class="@passwordIcon"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <button type="button" class="btn btn-primary w-100 py-2" @onclick=SignIn>Sign In</button>
                    <div class="text-center mt-3">
                        <a href="javascript:void(0);" @onclick="() => ChangePage()">Don't have an account? Sign Up</a>
                    </div>
                </form>
            }
            else
            {
                <h1 class="h3 mb-3 fw-normal text-center">Register</h1>
                <div class="form-floating mb-3">
                    <div class="mb-3">
                        <label class="form-label">UserName</label>
                        <input class="form-control" type="text" placeholder="UserName" @bind-value="_reqModel.UserName" maxlength="50" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input class="form-control" type="email" placeholder="Email" @bind-value="_reqModel.Email" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Phone No</label>
                        <input class="form-control" type="text" placeholder="Phone Number" @bind-value="_reqModel.PhoneNo" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <div class="input-group">
                            <input class="form-control" type=@password placeholder="Password" @bind-value="_reqModel.Password" maxlength="50" />
                            <button type="button" class="btn btn-outline-secondary" @onclick="PasswordVisibility">
                                <i class="@passwordIcon"></i>
                            </button>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Confirm Password</label>
                        <div class="input-group">
                            <input class="form-control" type=@cPassword placeholder="Confirm Password" @bind-value="_reqModel.ConfirmPassword" maxlength="50" />
                            <button type="button" class="btn btn-outline-secondary" @onclick="ConfirmPasswordVisibility">
                                <i class="@cPasswordIcon"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <button type="button" class="btn btn-primary w-100 py-2" @onclick=Register>Sign Up</button>
                <div class="text-center mt-3">
                    <a href="javascript:void(0);" @onclick="() => ChangePage()">Already have an account? Sign In</a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private LoginRequestModel _reqModel = new();
    private bool _isRegister = true;
    private bool isPasswordVisible = false;
    private bool isCPasswordVisible = false;
    private string password = "password";
    private string cPassword = "password";
    private string passwordIcon => isPasswordVisible ? "bi bi-eye-fill" : "bi bi-eye-slash-fill";
    private string cPasswordIcon => isCPasswordVisible ? "bi bi-eye-fill" : "bi bi-eye-slash-fill";
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
    }

    async Task SignIn()
    {
        if (!await CheckRequiredFields(_reqModel)) return;
        var model = await _loginService.Login(_reqModel);
        if (!model.Response.IsSuccess)
        {
            await _injectService.ErrorMessage(model.Response.Message);
            return;
        }
        var userSessionModel = new UserSessionModel
            {
                UserName = model.UserName,
                Role = model.Role,
                UserId = model.UserId,
            };
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(userSessionModel);
        Navigation.NavigateTo("/dashboard");
    }
    async Task Register()
    {
        if (!await CheckRequiredFields(_reqModel)) return;
        var model = await _registerService.Register(_reqModel);
        if (!model.Response.IsSuccess)
        {
            await _injectService.ErrorMessage(model.Response.Message);
            return;
        }
        await _injectService.SuccessMessage(model.Response.Message);
        _isRegister = false;
        _reqModel = new();
        StateHasChanged();
    }
    async Task<bool> CheckRequiredFields(LoginRequestModel _reqModel)
    {
        if (string.IsNullOrEmpty(_reqModel.UserName))
        {
            await _injectService.ErrorMessage("UserName Field is Required.");
            return false;
        }
        if (string.IsNullOrEmpty(_reqModel.Password))
        {
            await _injectService.ErrorMessage("Password Field is Required.");
            return false;
        }
        if (_isRegister)
        {
            if (string.IsNullOrEmpty(_reqModel.Email))
            {
                await _injectService.ErrorMessage("Email Field is Required.");
                return false;
            }
            if (string.IsNullOrEmpty(_reqModel.PhoneNo))
            {
                await _injectService.ErrorMessage("PhoneNo Field is Required.");
                return false;
            }
            if (_reqModel.Password!=_reqModel.ConfirmPassword)
            {
                await _injectService.ErrorMessage("Password and Confirm Password must be the same.");
                return false;
            }
        }
        return true;
    }

    private void ChangePage()
    {
        _isRegister = _isRegister ? false : true;
        _reqModel = new();
        StateHasChanged();
    }

    private void PasswordVisibility()
    {
        isPasswordVisible = isPasswordVisible ? false : true;
        password = password == "password" ? "text" : "password";
        StateHasChanged();
    }

    private void ConfirmPasswordVisibility()
    {
        isCPasswordVisible = isCPasswordVisible ? false : true;
        cPassword = cPassword == "password" ? "text" : "password";
        StateHasChanged();
    }
} 